{"version":3,"sources":["webpack://relatable/./src/index.js"],"names":["state","hidden","referencesCreated","joinButtons","document","querySelectorAll","wrappedjoinButtons","toggleHelp","querySelector","style","display","createSQLCode","joinType","code","getElementById","innerHTML","joinMoviesOnActors","newTable","output","moviesDup","i","rows","length","newTableHeaderRow","children","forEach","cell","append","row","cells","movie_id","innerText","parseInt","cloneNode","createDataOutput","actorsDup","id","color","backgroundColor","tr","createElement","blank","setAttribute","deleteRow","moviesRow","prepend","addEventListener","connectButton","connectText","plus","helpText","firstElementChild","classList","contains","remove","fontSize","btn","disabled","add","wrappedBtn"],"mappings":"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","file":"main.js","sourcesContent":["import \"./styles/index.scss\";\n\nconst state = {\n  hidden: true,\n  referencesCreated: false,\n}\n\nconst joinButtons = document.querySelectorAll(\".join-btn\");\nconst wrappedjoinButtons = document.querySelectorAll(\".join-btn-wrapper\");\n\ndocument.querySelector(\"#connect-btn\")\n  .addEventListener(\"click\", () => {\n    createReferences()\n    createSQLCode(\"reset\")\n    createDataOutput(\"reset\")\n  });\n\njoinButtons.forEach(btn => {\n  btn.addEventListener(\"click\", () => {\n    createSQLCode(btn.id)\n    createDataOutput(btn.id)\n  });\n})\n\nwrappedjoinButtons.forEach(wrappedBtn => {\n  wrappedBtn.addEventListener(\"mouseenter\", toggleHelp);\n})\n\nfunction toggleHelp() {\n  if (state.hidden && !state.referencesCreated) {\n    const helpText = document.querySelector(\".help-text\")\n      helpText.style.display = \"block\"\n      state.hidden = false;\n  }\n}\n\nfunction createReferences() {\n  const connectButton = document.getElementById(\"connect-btn\")\n  const connectText = connectButton.firstElementChild\n  const plus = document.getElementById(\"plus\")\n  const helpText = document.querySelector(\".help-text\")\n\n  document.querySelectorAll(\"tr .ref:last-child\").forEach(tr => {\n    \n    if (tr.classList.contains(\"hidden\")) {\n\n      state.referencesCreated = true;\n\n      tr.classList.remove(\"hidden\")\n\n      connectButton.style.backgroundColor = \"rgb(205, 236, 255)\"\n\n      connectText.innerHTML = \"References created\"\n      connectText.style.color = \"rgb(40, 113, 158)\"\n\n      plus.innerHTML = \"âœ“\"\n      plus.style.color = \"rgb(40, 113, 158)\"\n      plus.style.fontSize = \"large\"\n\n      joinButtons.forEach(btn => {\n        btn.disabled = false;\n      })\n\n      helpText.style.display = \"none\";\n      state.hidden = true;\n      \n    } else {\n\n      state.referencesCreated = false;\n      \n      tr.classList.add(\"hidden\");\n\n      connectButton.style.backgroundColor = \"rgb(237, 237, 237)\"\n\n      connectText.innerHTML = \"Create references\"\n      connectText.style.color = \"inherit\"\n\n      plus.innerHTML = \"+\";\n      plus.style.color = \"#5E5E5E\"\n      plus.style.fontSize = \"larger\"\n\n      joinButtons.forEach(btn => {\n        btn.disabled = true;\n      })\n\n    }\n  })\n}\n\nfunction createSQLCode(joinType) {\n  const code = document.getElementById(\"code\")\n  switch (joinType) {\n    case \"reset\":\n      code.innerHTML = \"Click a JOIN button and a SQL query will generate here...\"\n      break;\n\n    case \"inner\":\n      code.innerHTML = \"SELECT * <br> FROM actors <br> INNER JOIN movies <br> ON actors.movie_id = movies.id;\"\n      break;\n\n    case \"left\":\n      code.innerHTML = \"SELECT * <br> FROM actors <br> LEFT JOIN movies <br> ON actors.movie_id = movies.id;\"\n      break;\n      \n    case \"right\":\n      code.innerHTML = \"SELECT * <br> FROM actors <br> RIGHT JOIN movies <br> ON actors.movie_id = movies.id;\"\n      break;\n      \n    case \"full\":\n      code.innerHTML = \"SELECT * <br> FROM actors <br> FULL JOIN movies <br> ON actors.movie_id = movies.id;\"\n      break;\n  \n    default:\n      return;\n  }\n}\n\nfunction joinMoviesOnActors(newTable, output, moviesDup) {\n  // cycle through each of the actor rows\n  for (let i = 0; i < newTable.rows.length; i++) {\n    if (i < 2) { // copy column headers over\n      const newTableHeaderRow = newTable.rows[i]\n      const moviesHeaderRow = [...moviesDup.rows[i].children]\n      moviesHeaderRow.forEach(cell => newTableHeaderRow.append(cell))\n    } else { // look at the row's movie_id\n      const row = newTable.rows[i];\n      const cells = [...row.children];\n      const numCells = cells.length;\n      const movie_id = cells[numCells-1].innerText\n\n      // append the appropiate movie row's cells\n      if (movie_id != \"null\") {\n        const moviesRow = [...moviesDup.rows[parseInt(movie_id)+1].children]\n        moviesRow.forEach(cell => row.append(cell.cloneNode(true)))\n      }\n    }\n  }\n\n  output.append(newTable)\n}\n\nfunction createDataOutput(joinType) {\n  const output = document.getElementById(\"output-container\")\n  const actorsDup = document.getElementById(\"actors-table\").cloneNode(true)\n  const moviesDup = document.getElementById(\"movies-table\").cloneNode(true)\n  const newTable = actorsDup;\n  newTable.id = \"output-table\"\n  newTable.querySelector(\"#actors-body\").id = \"output-body\"\n  newTable.style.color = \"black\";\n  newTable.style.backgroundColor = \"white\";\n\n    let tr = document.createElement(\"tr\")\n    let blank = document.createElement(\"td\")\n    blank.setAttribute(\"colspan\", \"4\")\n    tr.append(blank)\n\n  switch (joinType) {\n    case \"reset\":\n      output.innerHTML = \"None\";\n      break;\n      \n      case \"inner\":\n      output.innerHTML = null;\n      newTable.deleteRow(5); // delete the null movie_id row\n      joinMoviesOnActors(newTable, output, moviesDup);\n      break;\n\n    case \"left\":\n      output.innerHTML = null;\n      joinMoviesOnActors(newTable, output, moviesDup);\n      break;\n      \n    case \"right\":\n      output.innerHTML = null;\n      newTable.deleteRow(5); // delete the null movie_id row\n      joinMoviesOnActors(newTable, output, moviesDup);\n      let moviesRow = [...moviesDup.rows[2].children]\n      moviesRow.forEach(cell => tr.append(cell.cloneNode(true)))\n      newTable.querySelector(\"#output-body\").prepend(tr)\n      break;\n      \n    case \"full\":\n      output.innerHTML = null;\n      joinMoviesOnActors(newTable, output, moviesDup);\n      moviesRow = [...moviesDup.rows[2].children]\n      moviesRow.forEach(cell => tr.append(cell.cloneNode(true)))\n      newTable.querySelector(\"#output-body\").append(tr)\n      break;\n  \n    default:\n      return;\n  }\n}\n\n\n"],"sourceRoot":""}